name: CI/CD - DailySync Fullstack Deploy

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build Spring Boot backend
        working-directory: backend
        run: mvn clean package -DskipTests

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build -t atharvakeshre08/springboot-example ./backend

      - name: Push Docker image to Docker Hub
        run: docker push atharvakeshre08/springboot-example:latest

      # ---- Frontend: Build Next.js App ----
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm install

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Archive frontend build
        working-directory: frontend
        run: tar -czf ../frontend-build.tar.gz .next node_modules public package.json

      - name: Upload frontend build to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "frontend-build.tar.gz"
          target: "/home/ec2-user/"

      - name: Install Node.js and PM2 on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
            sudo yum install -y nodejs
            sudo npm install -g pm2

      - name: Deploy frontend on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ec2-user
            rm -rf frontend || true
            mkdir frontend
            tar -xzf frontend-build.tar.gz -C frontend
            cd frontend
            pm2 delete frontend || true
            pm2 start "npm run start" --name frontend
            pm2 save

  deploy:
    needs: build
    runs-on: [aws-ec2]

    steps:
      - name: Create .env from secrets
        run: |
          cat > .env <<EOF
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          KAFKA_SERVERS=${{ secrets.KAFKA_SERVERS }}
          KAFKA_USERNAME=${{ secrets.KAFKA_USERNAME }}
          KAFKA_PASSWORD=${{ secrets.KAFKA_PASSWORD }}
          DATABASE_USER=${{ secrets.DATABASE_USER }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          GOOGLE_APP_USERNAME=${{ secrets.GOOGLE_APP_USERNAME }}
          GOOGLE_APP_PASSWORD=${{ secrets.GOOGLE_APP_PASSWORD }}
          KAFKA_SERVER=${{ secrets.KAFKA_SERVER }}
          WEATHER_APP_KEY=${{ secrets.WEATHER_APP_KEY }}
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_ACTIVE=${{ secrets.DATABASE_ACTIVE }}
          EOF

      - name: Pull Docker image
        run: docker pull atharvakeshre08/springboot-example:latest

      - name: Remove old container
        run: docker rm -f springboot-example-container || true

      - name: Run new container with .env
        run: |
          docker run -d -p 8080:8080 \
          -v $(pwd)/.env:/app/.env \
          --name springboot-example-container \
          atharvakeshre08/springboot-example


#      - name: Create .env file
#        working-directory: backend
#        run: |
#          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
#          echo "KAFKA_SERVERS=${{ secrets.KAFKA_SERVERS }}" >> .env
#          echo "KAFKA_USERNAME=${{ secrets.KAFKA_USERNAME }}" >> .env
#          echo "KAFKA_PASSWORD=${{ secrets.KAFKA_PASSWORD }}" >> .env
#          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env
#          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
#          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
#          echo "GOOGLE_APP_USERNAME=${{ secrets.GOOGLE_APP_USERNAME }}" >> .env
#          echo "GOOGLE_APP_PASSWORD=${{ secrets.GOOGLE_APP_PASSWORD }}" >> .env
#          echo "KAFKA_SERVER=${{ secrets.KAFKA_SERVER }}" >> .env
#          echo "WEATHER_APP_KEY=${{ secrets.WEATHER_APP_KEY }}" >> .env
#          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
#          echo "DATABASE_ACTIVE=${{ secrets.DATABASE_ACTIVE }}" >> .env
#
#      - name: Upload .env file to EC2
#        uses: appleboy/scp-action@v0.1.4
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_SSH_KEY }}
#          source: "backend/.env"
#          target: "/home/ec2-user/dailysync/"
#
#
#
#      - name: Deploy JAR to EC2
#        uses: appleboy/scp-action@v0.1.4
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_SSH_KEY }}
#          source: "backend/target/DailySync-0.0.1-SNAPSHOT.jar"
#          target: "/home/ec2-user/dailysync/"
#
##      - name: Upload start.sh to EC2
##        uses: appleboy/scp-action@v0.1.4
##        with:
##          host: ${{ secrets.EC2_HOST }}
##          username: ${{ secrets.EC2_USERNAME }}
##          key: ${{ secrets.EC2_SSH_KEY }}
##          source: "backend/start.sh"
##          target: "/home/ec2-user/dailysync/"
##          strip_components: 1
#
#      - name: SSH and deploy on EC2
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_SSH_KEY }}
#          script: |
#            bash -c '
#            # Using a heredoc with bash for better control and to avoid potential issues
#            # with how appleboy/ssh-action handles complex script strings.
#            # The -s option allows bash to read commands from standard input.
#            bash -s <<'EOF_SCRIPT_BLOCK'
#            set -e
#
#            set -x # Enable command tracing for debugging
#
#            echo ">>> Deployment script started on EC2"
#
#
#            APP_NAME="DailySync-0.0.1-SNAPSHOT.jar"
#            APP_USER="ec2-user" # Assuming this is the user running the app
#            # Use the username from secrets, assuming it's the correct one for the home directory
#            APP_USER="${{ secrets.EC2_USERNAME }}"
#            DEPLOY_BASE_DIR="/home/${APP_USER}/dailysync"
#            TARGET_DIR="${DEPLOY_BASE_DIR}/backend/target"
#            ENV_FILE_SOURCE="${DEPLOY_BASE_DIR}/.env"
#            ENV_FILE_DEST="${TARGET_DIR}/.env"
#            LOG_FILE="${TARGET_DIR}/app.log"
#
#
#            echo ">>> Attempting to stop existing ${APP_NAME} application..."
#            # Find PID more reliably, specific to the JAR name
#            PID=$(pgrep -f "java -jar ${APP_NAME}")
#            if [ -n "$PID" ]; then
#              echo ">>> Found existing ${APP_NAME} process with PID $PID. Terminating..."
#              kill "$PID"
#              # Add || true to prevent script exit if process already dead
#              kill "$PID" || echo "Process $PID may have already exited."
#              # Wait a bit for it to terminate gracefully
#              sleep 5
#              sleep 5
#              if ps -p "$PID" > /dev/null; then
#                echo ">>> Process $PID did not terminate, forcing kill (-9)..."
#                kill -9 "$PID"
#                kill -9 "$PID" || echo "Force kill of $PID may have failed or it exited."
#              else
#                echo ">>> Process $PID terminated successfully."
#              fi
#            else
#              echo ">>> No existing ${APP_NAME} process found."
#            fi
#
#
#            echo ">>> Ensuring target directory exists: ${TARGET_DIR}"
#            mkdir -p "${TARGET_DIR}"
#
#
#            echo ">>> Moving .env file from ${ENV_FILE_SOURCE} to ${ENV_FILE_DEST}"
#            if [ -f "${ENV_FILE_SOURCE}" ]; then
#              mv "${ENV_FILE_SOURCE}" "${ENV_FILE_DEST}"
#            else
#              echo ">>> WARNING: ${ENV_FILE_SOURCE} not found. Application might not start correctly if it relies on it."
#            fi
#
#
#            echo ">>> Changing to application directory: ${TARGET_DIR}"
#            cd "${TARGET_DIR}"
#
#
#            echo ">>> Starting ${APP_NAME}. Output will be logged to ${LOG_FILE}"
#            nohup java -jar "${APP_NAME}" > "${LOG_FILE}" 2>&1 &
#            NOHUP_PID=$!
#            echo ">>> ${APP_NAME} launched with PID ${NOHUP_PID}."
#
#
#            echo ">>> Waiting for 10 seconds to allow the application to stabilize and detach..."
#            sleep 10
#
#
#            if ps -p "${NOHUP_PID}" > /dev/null; then
#              echo ">>> ${APP_NAME} (PID ${NOHUP_PID}) is running after 10s."
#            else
#              echo ">>> CRITICAL: ${APP_NAME} (PID ${NOHUP_PID}) is NOT running after 10s. Check ${LOG_FILE} on the EC2 instance for errors."
#              # Consider exiting with an error if the process isn't running, to make the GitHub Action step fail clearly.
#              # exit 1
#              # exit 1 # Uncomment this line if you want the job to fail here
#            fi
#
#
#            echo ">>> Deployment script finished."
#            '
#            EOF_SCRIPT_BLOCK
#
#
#
